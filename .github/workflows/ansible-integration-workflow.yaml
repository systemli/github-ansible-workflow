---
name: Integration

on:
  workflow_call:
    inputs:
      distros:
        required: false
        description: "List of distributions to test against the Role"
        type: string
        default: '[ "debian11", "debian10" ]'
      python-dependencies:
        required: false
        description: "Default pip dependencies for molecule"
        type: string
        default: |
          molecule==5.0.1
          molecule-plugins[docker]
          jmespath
      molecule-config:
        required: false
        description: "Configuration for molecule"
        type: string
        default: |
          ---
          driver:
            name: docker
          platforms:
            - name: instance
              image: "geerlingguy/docker-\$\{MOLECULE_DISTRO:-debian11\}-ansible:latest"
              command: ""
              volumes:
                - /sys/fs/cgroup:/sys/fs/cgroup:rw
                - /var/lib/containerd
              cgroupns_mode: host
              privileged: true
              pre_build_image: true
          provisioner:
            name: ansible
            playbooks:
              converge: ../default/converge.yml
      disable-apparmor-mysql:
        required: false
        description: "Disable AppArmor MySQL Profile for the Job Runner"
        type: boolean
        default: false

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install ansible-lint
        run: pip install ansible-lint

      - name: Install Ansible Role Requirements
        run: |
          if test -f "requirements.yml"; then
            ansible-galaxy install -r requirements.yml
          fi

      - name: Ansible Lint
        run: ansible-lint .

  test:
    name: Molecule
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        distro: ${{ fromJSON(inputs.distros) }}
      fail-fast: false
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Prepare Molecule Tests
        run: |
          # Creating required directories
          mkdir -p molecule/github
          # Writing required packages to requirements.txt (to cached)
          echo "${{ inputs.python-dependencies }}" > molecule/requirements.txt
          # Writing molecule config for docker
          echo "${{ inputs.molecule-config}}" > molecule/github/molecule.yml

          # Copy test dependencies if they exist
          if test -f "molecule/default/requirements.yml"; then
            cp molecule/default/requirements.yml molecule/github/requirements.yml
          fi

          # Add prepare playbook if exists
          if test -f "molecule/default/prepare.yml"; then
            yq e --inplace '.provisioner.playbooks += {"prepare":"../default/prepare.yml"}' molecule/github/molecule.yml
          fi

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.x"
          cache: "pip"
          cache-dependency-path: "molecule/requirements.txt"

      - name: Install testing dependencies
        run: pip3 install -r molecule/requirements.txt

      - name: Install Ansible Role Requirements
        run: |
          if test -f "requirements.yml"; then
            ansible-galaxy install -r requirements.yml
          fi

      - name: Disable AppArmor (MySQL)
        run: |
          set -x
          sudo apt-get update
          sudo apt-get install apparmor-profiles
          sudo apparmor_status
          sudo ln -s /etc/apparmor.d/usr.sbin.mysqld /etc/apparmor.d/disable/
          sudo apparmor_parser -R /etc/apparmor.d/usr.sbin.mysqld
          sudo apparmor_status
        if: inputs.disable-apparmor-mysql

      - name: Print Molecule debug information
        run: |
          echo "Print molecule/requirements.txt"
          cat molecule/requirements.txt
          echo "Print molecule/github/molecule.yml"
          cat molecule/github/molecule.yml
          echo "Print molecule/default/converge.yml"
          cat molecule/default/converge.yml
          if [ -f "molecule/default/prepare.yml" ]; then echo "Print molecule/default/prepare.yml" && cat molecule/default/prepare.yml; fi

      - name: Molecule Test
        run: molecule test -s github
        env:
          PY_COLORS: "1"
          ANSIBLE_FORCE_COLOR: "1"
          MOLECULE_DISTRO: ${{ matrix.distro }}
